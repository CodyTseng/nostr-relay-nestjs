version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: nostr_relay_postgres
    environment:
      POSTGRES_USER: nostr_user
      POSTGRES_PASSWORD: nostr_password
      POSTGRES_DB: nostr_relay
      # Performance tuning
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_WORK_MEM: 16MB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_SYNCHRONOUS_COMMIT: 'off'
      # Logging
      POSTGRES_LOG_MIN_DURATION_STATEMENT: 1000
      POSTGRES_LOG_STATEMENT: 'none'
      POSTGRES_LOG_CHECKPOINTS: 'on'
      # Additional logging for fail2ban
      POSTGRES_LOGGING_COLLECTOR: 'on'
      POSTGRES_LOG_DIRECTORY: '/var/log/postgresql'
      POSTGRES_LOG_FILENAME: 'postgresql.log'
      POSTGRES_LOG_FILE_MODE: '0644'
    ports:
      - "127.0.0.1:5432:5432"  # Only allow local connections
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Initialization scripts
      - ./backups:/backups  # Backup directory
      - postgres_logs:/var/log/postgresql  # Log directory for fail2ban
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nostr_user -d nostr_relay"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    stop_grace_period: 60s  # Give time for clean shutdown
    networks:
      - nostr_network

  # Fail2ban service for security
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: nostr_relay_fail2ban
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - NET_RAW
    network_mode: "host"  # Required for iptables
    volumes:
      - ./fail2ban:/data/fail2ban
      - postgres_logs:/var/log/postgresql:ro
    environment:
      - TZ=UTC
      - F2B_LOG_TARGET=STDOUT
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=7d
    profiles: ["prod"]  # Only run in production

  # Optional: pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4
    container_name: nostr_relay_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'True'
    ports:
      - "127.0.0.1:5050:80"  # Only allow local connections
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    networks:
      - nostr_network
    profiles: ["dev"]  # Only start in development

  # Backup service
  backup:
    image: postgres:15
    container_name: nostr_relay_backup
    volumes:
      - ./backups:/backups
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: nostr_relay
      POSTGRES_USER: nostr_user
      POSTGRES_PASSWORD: nostr_password
    command: |
      bash -c 'while true; do
        pg_dump -h postgres -U nostr_user -d nostr_relay -F c -f /backups/backup_$$(date +%Y%m%d_%H%M%S).dump;
        find /backups -type f -mtime +7 -delete;
        sleep 86400;
      done'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nostr_network
    profiles: ["prod"]  # Only start in production

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/postgres-data  # Persistent storage path
      o: bind
  pgadmin_data:
    driver: local
  postgres_logs:
    driver: local

networks:
  nostr_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
